generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  password       String
  role           Role          @default(USER)
  pictureProfile String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Transaction    Transaction[]

  @@map("users")
}

model Tenant {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  pictureProfile String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("tenants")
}

enum Role {
  TENANT
  USER
}

model Property {
  id   Int    @id @default(autoincrement())
  Room Room[]

  @@map("properties")
}

model Transaction {
  id           Int               @id @default(autoincrement())
  uuid         String            @unique
  userid       Int
  roomid       String
  status       TransactionStatus @default(PENDING)
  total        Decimal
  startDate    DateTime
  endDate      DateTime
  paymentProof String? // or String? if it's optional
  invoke_url   String?
  expiredAt    DateTime
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  user User @relation(fields: [id], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomid], references: [id], onDelete: Cascade)

  @@map("transactions")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
  CANCELLED
}

//temp

model Room {
  id           String        @id @default(cuid())
  name         String
  stock        Int
  price        Decimal
  propertyId   Int
  property     Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]

  @@map("rooms")
}
