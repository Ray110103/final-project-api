generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id             Int     @id @default(autoincrement())
  name           String
  email          String  @unique
  password       String?
  role           Role    @default(USER)
  pictureProfile String?
  isVerified     Boolean @default(false)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  properties  Property[]
  Transaction Transaction[]

  @@map("users")
}

model Tenant {
  id             Int        @id @default(autoincrement())
  name           String
  email          String     @unique
  pictureProfile String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Property       Property[]

  @@map("tenants")
}

enum Role {
  TENANT
  USER
}

model Property {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String
  status      Status   @default(ACTIVE)
  description String
  location    String
  thumbnail   String?
  city        String
  address     String?
  latitude    String
  longtitude  String
  category    String
  
  tenantId    Int?
  tenant      Tenant?   @relation(fields: [tenantId], references: [id])

  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])

  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deletedAt          DateTime?
  rooms              Room[]
  propertyImages     PropertyImage[]
  propertyFacilities PropertyFacility[]

  @@map("properties")
}

enum Status {
  ACTIVE
  DRAFT
}

model Room {
  id         Int   @id @default(autoincrement())
  name       String
  stock      Int
  price      Decimal
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  transactions         Transaction[]
  seasonalRates       SeasonalRate[]
  roomNonAvailability RoomNonAvailability[]

  @@map("rooms")
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("property_images")
}

model PropertyFacility {
  id         Int      @id @default(autoincrement())
  title      String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("property_facilities")
}

model RoomNonAvailability {
  id     Int      @id @default(autoincrement())
  date   DateTime
  reason String?
  roomId Int
  room   Room     @relation(fields: [roomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("room_non_availability")
}

model SeasonalRate {
  id     Int      @id @default(autoincrement())
  price  Decimal
  date   DateTime
  roomId Int
  room   Room     @relation(fields: [roomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("seasonal_rates")
}

model Transaction {
  id           Int               @id @default(autoincrement())
  uuid         String            @unique @default(uuid())
  userId       Int
  user         User              @relation(fields: [userId], references: [id])
  username     String
  roomId       Int
  room         Room              @relation(fields: [roomId], references: [id])
  qty          Int
  status       TransactionStatus @default(WAITING_FOR_PAYMENT)
  total        Int
  startDate    DateTime
  endDate      DateTime
  paymentProof String?
  invoice_url  String?
  expiredAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  paymentMethod PaymentMethod

  // Relations


  @@map("transactions")
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION
  PAID
  CANCELLED
  EXPIRED
}

enum PaymentMethod {
  MANUAL_TRANSFER
  PAYMENT_GATEWAY
}