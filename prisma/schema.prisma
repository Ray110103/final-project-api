generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id             Int     @id @default(autoincrement())
  name           String
  email          String  @unique
  password       String?
  role           Role    @default(USER)
  pictureProfile String?
  isVerified     Boolean @default(false)

  // Tambahkan field untuk OAuth
  provider   String? // 'GOOGLE', 'GITHUB', 'LOCAL'
  providerId String? // ID dari OAuth provider
  avatar     String? // Avatar URL dari OAuth provider

  pendingEmail           String? // email baru yang menunggu verifikasi
  emailVerificationToken String? // token untuk verifikasi email baru
  emailTokenExpiry       DateTime? // waktu expire token

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Transaction          Transaction[]
  properties           Property[]
  Review             Review[]
  propertyCategories PropertyCategory[] // âœ… Relation to categories created by this tenant

  tenantReplies Reply[]       @relation("UserTenantReplies")

  @@map("users")

}



enum Role {
  TENANT
  USER
}

model Property {
  id          Int     @id @default(autoincrement())
  title       String  @unique
  slug        String  @unique
  status      Status  @default(ACTIVE)
  description String
  location    String
  thumbnail   String?
  city        String
  address     String?
  latitude    String
  longtitude  String

  categoryId Int?
  category   PropertyCategory? @relation(fields: [categoryId], references: [id])

  tenantId Int
  tenant   User @relation(fields: [tenantId], references: [id])

  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  deletedAt  DateTime?
  rooms      Room[]
  images     PropertyImage[]
  facilities PropertyFacility[]
  Review     Review[]

  @@map("properties")
}

model PropertyCategory {
  id       Int     @id @default(autoincrement())
  name     String
  slug     String  @unique
  isActive Boolean @default(true)

  tenantId Int
  tenant   User @relation(fields: [tenantId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relation to properties using this category
  properties Property[]

  @@map("property_categories")
}

enum Status {
  ACTIVE
  DRAFT
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("property_images")
}

model PropertyFacility {
  id         Int      @id @default(autoincrement())
  title      String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("property_facilities")
}

model Room {
  id       Int    @id @default(autoincrement())
  name     String
  stock    Int
  capacity Int // Kapasitas tamu per room

  price       Decimal
  description String
  propertyId  Int
  property    Property @relation(fields: [propertyId], references: [id])

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  transactions        Transaction[]
  seasonalRates       SeasonalRate[]
  roomNonAvailability RoomNonAvailability[]
  images              RoomImage[]
  facilities          RoomFacility[]

  @@map("rooms")
}

model RoomFacility {
  id        Int      @id @default(autoincrement())
  title     String
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("room_facilities")
}

model RoomImage {
  id        Int      @id @default(autoincrement())
  url       String
  roomId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("room_images")
}

model RoomNonAvailability {
  id     Int      @id @default(autoincrement())
  date   DateTime
  reason String?
  roomId Int
  room   Room     @relation(fields: [roomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("room_non_availability")
}

model SeasonalRate {
  id              Int            @id @default(autoincrement())
  roomId          Int
  room            Room           @relation(fields: [roomId], references: [id])
  startDate       DateTime // Tanggal mulai periode
  endDate         DateTime // Tanggal akhir periode
  adjustmentValue Decimal // Nilai kenaikan
  adjustmentType  AdjustmentType // PERCENTAGE atau NOMINAL
  reason          String? // Alasan kenaikan harga
  isActive        Boolean        @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("seasonal_rates")
}

enum AdjustmentType {
  PERCENTAGE
  NOMINAL
}

model Transaction {
  id            Int               @id @default(autoincrement())
  uuid          String            @unique @default(uuid())
  userId        Int
  user          User              @relation(fields: [userId], references: [id])
  username      String
  roomId        Int
  room          Room              @relation(fields: [roomId], references: [id])
  qty           Int
  status        TransactionStatus @default(WAITING_FOR_PAYMENT)
  total         Int
  startDate     DateTime
  endDate       DateTime
  paymentProof  String?
  invoice_url   String?
  expiredAt     DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  paymentMethod PaymentMethod
  review        Review?

  @@map("transactions")
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION
  PAID
  CANCELLED
  EXPIRED
}

enum PaymentMethod {
  MANUAL_TRANSFER
  PAYMENT_GATEWAY
}

model Review {
  id            Int         @id @default(autoincrement())
  comment       String
  rating        Int // 1-5 rating
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  propertyId    Int
  property      Property    @relation(fields: [propertyId], references: [id])
  transactionId Int         @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  replies       Reply[]

  @@map("reviews")
}

model Reply {
  id        Int      @id @default(autoincrement())
  comment   String
  reviewId  Int
  review    Review   @relation(fields: [reviewId], references: [id])
  tenantId  Int
  tenant    User     @relation("UserTenantReplies", fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("replies")
}
