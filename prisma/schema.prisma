generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  password       String
  role           Role          @default(USER)
  pictureProfile String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  properties     Property[]
  Transaction    Transaction[]

  @@map("users")
}

model Tenant {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  pictureProfile String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("tenants")
}

enum Role {
  TENANT
  USER
}

model Property {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  status      Status   @default(ACTIVE)
  description String
  city        String
  address     String?
  latitude    String
  longtitude  String
  pictures    String[]
  category    String
  tenantId    Int
  tenant      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  rooms     Room[]

  @@map("properties")
}

enum Status {
  ACTIVE
  DRAFT
}

model Room {
  id          String        @id @default(uuid())
  name        String
  stock       Int
  price       Decimal
  propertyId  Int
  property    Property      @relation(fields: [propertyId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]

  @@map("rooms")
}

model Transaction {
  id           Int               @id @default(autoincrement())
  uuid         String            @unique @default(uuid())
  userid       Int
  user         User              @relation(fields: [userid], references: [id], onDelete: Cascade)
  username     String
  roomid       String
  room         Room              @relation(fields: [roomid], references: [id], onDelete: Cascade)
  qty          Int
  status       TransactionStatus @default(WAITING_FOR_PAYMENT)
  total        Int
  startDate    DateTime
  endDate      DateTime
  paymentProof String?
  invoice_url  String?
  expiredAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations

  @@map("transactions")
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION
  PAID
  CANCELLED
  EXPIRED
}
